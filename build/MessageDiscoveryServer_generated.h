// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGEDISCOVERYSERVER_JOESCAN_SCHEMA_SERVER_H_
#define FLATBUFFERS_GENERATED_MESSAGEDISCOVERYSERVER_JOESCAN_SCHEMA_SERVER_H_

#include "flatbuffers/flatbuffers.h"

#include "ScanHeadType_generated.h"

namespace joescan {
namespace schema {
namespace server {

struct MessageServerDiscovery;
struct MessageServerDiscoveryBuilder;
struct MessageServerDiscoveryT;

enum ScanHeadState : uint16_t {
  ScanHeadState_INVALID = 0,
  ScanHeadState_IDLE = 1,
  ScanHeadState_CONNECTED = 2,
  ScanHeadState_SCANNING = 3,
  ScanHeadState_MIN = ScanHeadState_INVALID,
  ScanHeadState_MAX = ScanHeadState_SCANNING
};

inline const ScanHeadState (&EnumValuesScanHeadState())[4] {
  static const ScanHeadState values[] = {
    ScanHeadState_INVALID,
    ScanHeadState_IDLE,
    ScanHeadState_CONNECTED,
    ScanHeadState_SCANNING
  };
  return values;
}

inline const char * const *EnumNamesScanHeadState() {
  static const char * const names[5] = {
    "INVALID",
    "IDLE",
    "CONNECTED",
    "SCANNING",
    nullptr
  };
  return names;
}

inline const char *EnumNameScanHeadState(ScanHeadState e) {
  if (flatbuffers::IsOutRange(e, ScanHeadState_INVALID, ScanHeadState_SCANNING)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesScanHeadState()[index];
}

struct MessageServerDiscoveryT : public flatbuffers::NativeTable {
  typedef MessageServerDiscovery TableType;
  uint32_t version_major = 0;
  uint32_t version_minor = 0;
  uint32_t version_patch = 0;
  uint32_t version_commit = 0;
  uint16_t version_flags = 0;
  uint32_t serial_number = 0;
  joescan::schema::ScanHeadType type = joescan::schema::ScanHeadType_INVALID;
  std::string type_str{};
  uint32_t ip_client = 0;
  uint32_t ip_server = 0;
  joescan::schema::server::ScanHeadState state = joescan::schema::server::ScanHeadState_INVALID;
  uint32_t link_speed_mbps = 0;
};

struct MessageServerDiscovery FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MessageServerDiscoveryT NativeTableType;
  typedef MessageServerDiscoveryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION_MAJOR = 4,
    VT_VERSION_MINOR = 6,
    VT_VERSION_PATCH = 8,
    VT_VERSION_COMMIT = 10,
    VT_VERSION_FLAGS = 12,
    VT_SERIAL_NUMBER = 14,
    VT_TYPE = 16,
    VT_TYPE_STR = 18,
    VT_IP_CLIENT = 20,
    VT_IP_SERVER = 22,
    VT_STATE = 24,
    VT_LINK_SPEED_MBPS = 26
  };
  uint32_t version_major() const {
    return GetField<uint32_t>(VT_VERSION_MAJOR, 0);
  }
  uint32_t version_minor() const {
    return GetField<uint32_t>(VT_VERSION_MINOR, 0);
  }
  uint32_t version_patch() const {
    return GetField<uint32_t>(VT_VERSION_PATCH, 0);
  }
  uint32_t version_commit() const {
    return GetField<uint32_t>(VT_VERSION_COMMIT, 0);
  }
  uint16_t version_flags() const {
    return GetField<uint16_t>(VT_VERSION_FLAGS, 0);
  }
  uint32_t serial_number() const {
    return GetField<uint32_t>(VT_SERIAL_NUMBER, 0);
  }
  joescan::schema::ScanHeadType type() const {
    return static_cast<joescan::schema::ScanHeadType>(GetField<uint16_t>(VT_TYPE, 0));
  }
  const flatbuffers::String *type_str() const {
    return GetPointer<const flatbuffers::String *>(VT_TYPE_STR);
  }
  uint32_t ip_client() const {
    return GetField<uint32_t>(VT_IP_CLIENT, 0);
  }
  uint32_t ip_server() const {
    return GetField<uint32_t>(VT_IP_SERVER, 0);
  }
  joescan::schema::server::ScanHeadState state() const {
    return static_cast<joescan::schema::server::ScanHeadState>(GetField<uint16_t>(VT_STATE, 0));
  }
  uint32_t link_speed_mbps() const {
    return GetField<uint32_t>(VT_LINK_SPEED_MBPS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_VERSION_MAJOR) &&
           VerifyField<uint32_t>(verifier, VT_VERSION_MINOR) &&
           VerifyField<uint32_t>(verifier, VT_VERSION_PATCH) &&
           VerifyField<uint32_t>(verifier, VT_VERSION_COMMIT) &&
           VerifyField<uint16_t>(verifier, VT_VERSION_FLAGS) &&
           VerifyField<uint32_t>(verifier, VT_SERIAL_NUMBER) &&
           VerifyField<uint16_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_TYPE_STR) &&
           verifier.VerifyString(type_str()) &&
           VerifyField<uint32_t>(verifier, VT_IP_CLIENT) &&
           VerifyField<uint32_t>(verifier, VT_IP_SERVER) &&
           VerifyField<uint16_t>(verifier, VT_STATE) &&
           VerifyField<uint32_t>(verifier, VT_LINK_SPEED_MBPS) &&
           verifier.EndTable();
  }
  MessageServerDiscoveryT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MessageServerDiscoveryT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<MessageServerDiscovery> Pack(flatbuffers::FlatBufferBuilder &_fbb, const MessageServerDiscoveryT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MessageServerDiscoveryBuilder {
  typedef MessageServerDiscovery Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version_major(uint32_t version_major) {
    fbb_.AddElement<uint32_t>(MessageServerDiscovery::VT_VERSION_MAJOR, version_major, 0);
  }
  void add_version_minor(uint32_t version_minor) {
    fbb_.AddElement<uint32_t>(MessageServerDiscovery::VT_VERSION_MINOR, version_minor, 0);
  }
  void add_version_patch(uint32_t version_patch) {
    fbb_.AddElement<uint32_t>(MessageServerDiscovery::VT_VERSION_PATCH, version_patch, 0);
  }
  void add_version_commit(uint32_t version_commit) {
    fbb_.AddElement<uint32_t>(MessageServerDiscovery::VT_VERSION_COMMIT, version_commit, 0);
  }
  void add_version_flags(uint16_t version_flags) {
    fbb_.AddElement<uint16_t>(MessageServerDiscovery::VT_VERSION_FLAGS, version_flags, 0);
  }
  void add_serial_number(uint32_t serial_number) {
    fbb_.AddElement<uint32_t>(MessageServerDiscovery::VT_SERIAL_NUMBER, serial_number, 0);
  }
  void add_type(joescan::schema::ScanHeadType type) {
    fbb_.AddElement<uint16_t>(MessageServerDiscovery::VT_TYPE, static_cast<uint16_t>(type), 0);
  }
  void add_type_str(flatbuffers::Offset<flatbuffers::String> type_str) {
    fbb_.AddOffset(MessageServerDiscovery::VT_TYPE_STR, type_str);
  }
  void add_ip_client(uint32_t ip_client) {
    fbb_.AddElement<uint32_t>(MessageServerDiscovery::VT_IP_CLIENT, ip_client, 0);
  }
  void add_ip_server(uint32_t ip_server) {
    fbb_.AddElement<uint32_t>(MessageServerDiscovery::VT_IP_SERVER, ip_server, 0);
  }
  void add_state(joescan::schema::server::ScanHeadState state) {
    fbb_.AddElement<uint16_t>(MessageServerDiscovery::VT_STATE, static_cast<uint16_t>(state), 0);
  }
  void add_link_speed_mbps(uint32_t link_speed_mbps) {
    fbb_.AddElement<uint32_t>(MessageServerDiscovery::VT_LINK_SPEED_MBPS, link_speed_mbps, 0);
  }
  explicit MessageServerDiscoveryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MessageServerDiscovery> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MessageServerDiscovery>(end);
    return o;
  }
};

inline flatbuffers::Offset<MessageServerDiscovery> CreateMessageServerDiscovery(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version_major = 0,
    uint32_t version_minor = 0,
    uint32_t version_patch = 0,
    uint32_t version_commit = 0,
    uint16_t version_flags = 0,
    uint32_t serial_number = 0,
    joescan::schema::ScanHeadType type = joescan::schema::ScanHeadType_INVALID,
    flatbuffers::Offset<flatbuffers::String> type_str = 0,
    uint32_t ip_client = 0,
    uint32_t ip_server = 0,
    joescan::schema::server::ScanHeadState state = joescan::schema::server::ScanHeadState_INVALID,
    uint32_t link_speed_mbps = 0) {
  MessageServerDiscoveryBuilder builder_(_fbb);
  builder_.add_link_speed_mbps(link_speed_mbps);
  builder_.add_ip_server(ip_server);
  builder_.add_ip_client(ip_client);
  builder_.add_type_str(type_str);
  builder_.add_serial_number(serial_number);
  builder_.add_version_commit(version_commit);
  builder_.add_version_patch(version_patch);
  builder_.add_version_minor(version_minor);
  builder_.add_version_major(version_major);
  builder_.add_state(state);
  builder_.add_type(type);
  builder_.add_version_flags(version_flags);
  return builder_.Finish();
}

inline flatbuffers::Offset<MessageServerDiscovery> CreateMessageServerDiscoveryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version_major = 0,
    uint32_t version_minor = 0,
    uint32_t version_patch = 0,
    uint32_t version_commit = 0,
    uint16_t version_flags = 0,
    uint32_t serial_number = 0,
    joescan::schema::ScanHeadType type = joescan::schema::ScanHeadType_INVALID,
    const char *type_str = nullptr,
    uint32_t ip_client = 0,
    uint32_t ip_server = 0,
    joescan::schema::server::ScanHeadState state = joescan::schema::server::ScanHeadState_INVALID,
    uint32_t link_speed_mbps = 0) {
  auto type_str__ = type_str ? _fbb.CreateString(type_str) : 0;
  return joescan::schema::server::CreateMessageServerDiscovery(
      _fbb,
      version_major,
      version_minor,
      version_patch,
      version_commit,
      version_flags,
      serial_number,
      type,
      type_str__,
      ip_client,
      ip_server,
      state,
      link_speed_mbps);
}

flatbuffers::Offset<MessageServerDiscovery> CreateMessageServerDiscovery(flatbuffers::FlatBufferBuilder &_fbb, const MessageServerDiscoveryT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline MessageServerDiscoveryT *MessageServerDiscovery::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<MessageServerDiscoveryT>(new MessageServerDiscoveryT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void MessageServerDiscovery::UnPackTo(MessageServerDiscoveryT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = version_major(); _o->version_major = _e; }
  { auto _e = version_minor(); _o->version_minor = _e; }
  { auto _e = version_patch(); _o->version_patch = _e; }
  { auto _e = version_commit(); _o->version_commit = _e; }
  { auto _e = version_flags(); _o->version_flags = _e; }
  { auto _e = serial_number(); _o->serial_number = _e; }
  { auto _e = type(); _o->type = _e; }
  { auto _e = type_str(); if (_e) _o->type_str = _e->str(); }
  { auto _e = ip_client(); _o->ip_client = _e; }
  { auto _e = ip_server(); _o->ip_server = _e; }
  { auto _e = state(); _o->state = _e; }
  { auto _e = link_speed_mbps(); _o->link_speed_mbps = _e; }
}

inline flatbuffers::Offset<MessageServerDiscovery> MessageServerDiscovery::Pack(flatbuffers::FlatBufferBuilder &_fbb, const MessageServerDiscoveryT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMessageServerDiscovery(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<MessageServerDiscovery> CreateMessageServerDiscovery(flatbuffers::FlatBufferBuilder &_fbb, const MessageServerDiscoveryT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const MessageServerDiscoveryT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _version_major = _o->version_major;
  auto _version_minor = _o->version_minor;
  auto _version_patch = _o->version_patch;
  auto _version_commit = _o->version_commit;
  auto _version_flags = _o->version_flags;
  auto _serial_number = _o->serial_number;
  auto _type = _o->type;
  auto _type_str = _o->type_str.empty() ? 0 : _fbb.CreateString(_o->type_str);
  auto _ip_client = _o->ip_client;
  auto _ip_server = _o->ip_server;
  auto _state = _o->state;
  auto _link_speed_mbps = _o->link_speed_mbps;
  return joescan::schema::server::CreateMessageServerDiscovery(
      _fbb,
      _version_major,
      _version_minor,
      _version_patch,
      _version_commit,
      _version_flags,
      _serial_number,
      _type,
      _type_str,
      _ip_client,
      _ip_server,
      _state,
      _link_speed_mbps);
}

inline const joescan::schema::server::MessageServerDiscovery *GetMessageServerDiscovery(const void *buf) {
  return flatbuffers::GetRoot<joescan::schema::server::MessageServerDiscovery>(buf);
}

inline const joescan::schema::server::MessageServerDiscovery *GetSizePrefixedMessageServerDiscovery(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<joescan::schema::server::MessageServerDiscovery>(buf);
}

inline bool VerifyMessageServerDiscoveryBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<joescan::schema::server::MessageServerDiscovery>(nullptr);
}

inline bool VerifySizePrefixedMessageServerDiscoveryBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<joescan::schema::server::MessageServerDiscovery>(nullptr);
}

inline void FinishMessageServerDiscoveryBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<joescan::schema::server::MessageServerDiscovery> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageServerDiscoveryBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<joescan::schema::server::MessageServerDiscovery> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<joescan::schema::server::MessageServerDiscoveryT> UnPackMessageServerDiscovery(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<joescan::schema::server::MessageServerDiscoveryT>(GetMessageServerDiscovery(buf)->UnPack(res));
}

inline std::unique_ptr<joescan::schema::server::MessageServerDiscoveryT> UnPackSizePrefixedMessageServerDiscovery(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<joescan::schema::server::MessageServerDiscoveryT>(GetSizePrefixedMessageServerDiscovery(buf)->UnPack(res));
}

}  // namespace server
}  // namespace schema
}  // namespace joescan

#endif  // FLATBUFFERS_GENERATED_MESSAGEDISCOVERYSERVER_JOESCAN_SCHEMA_SERVER_H_
